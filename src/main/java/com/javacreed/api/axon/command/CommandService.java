package com.javacreed.api.axon.command;

import java.util.concurrent.CompletableFuture;

import org.axonframework.commandhandling.CommandBus;
import org.axonframework.commandhandling.CommandMessage;
import org.axonframework.commandhandling.gateway.CommandGateway;
import org.axonframework.messaging.Message;
import org.axonframework.messaging.MetaData;

/**
 * The command service is a simple wrapper on the {@link CommandGateway} which provides the caller the facility to
 * listen to the events generated by the command. The called can stop listening to these events by using the returned
 * {@link IgnoreHandle} instance. Note that the command is not effected by ignoring of the events.
 *
 * @author Albert Attard
 * @see IgnoreHandle
 * @see CommandGateway
 */
public interface CommandService {

  /**
   * Sends the given <code>command</code> and returns immediately, without waiting for the command to execute. The
   * caller will therefore not receive any feedback on the command's execution.
   * <p/>
   * The given <code>command</code> is wrapped as the payload of the {@link CommandMessage} that is eventually posted on
   * the {@link CommandBus}, unless given <code>command</code> already implements {@link Message}. In that case, a
   * {@link CommandMessage} is constructed from that message's payload and {@link MetaData}.
   *
   * @param command
   *          The command to dispatch (which cannot be <code>null</code>)
   * @param <T>
   *          The type of command
   * @param <R>
   *          The type of result expected from command execution
   * @return a {@link CompletableFuture} which is resolved when the command is executed
   * @throws NullPointerException
   *           if the given <code>command</code> is <code>null</code>
   */
  <T, R> CompletableFuture<R> send(T command) throws NullPointerException;

  /**
   * Sends the given <code>command</code>, and have the result of the command's execution reported to the given
   * <code>callback</code>.
   * <p/>
   * The given <code>command</code> is wrapped as the payload of the {@link CommandMessage} that is eventually posted on
   * the {@link CommandBus}, unless the given Command already implements {@link Message}. In that case, a
   * {@link CommandMessage} is constructed from that message's payload and {@link MetaData}.
   * </p>
   * The command and generated events are linked through metadata. The command handler needs to pass the metadata to the
   * events as otherwise these will not be properly linked
   *
   * @param command
   *          The command to dispatch (which cannot be <code>null</code>)
   * @param callback
   *          The callback to notify with all events generated by the given <code>command</code> (which cannot be
   *          <code>null</code>)
   * @param <T>
   *          The type of command
   * @return A handle through which the caller can ignore any further events (without effecting the command execution)
   * @throws NullPointerException
   *           if the given <code>command</code> or <code>callback</code> are <code>null</code>
   * @throws FailedToGenerateUniqueActionReferenceException
   *           if it fails to create a unique reference
   */
  <T> IgnoreHandle sendAndListen(T command, Callback callback)
      throws NullPointerException, FailedToGenerateUniqueActionReferenceException;

}
